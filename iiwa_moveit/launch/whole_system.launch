<?xml version="1.0" encoding="UTF-8"?>
<launch>

  <!--should be configured in simulation.launch-->
  <arg name="world_name_global" default="worlds/empty.world"/>
  
  <!--To launch RVIZ set the value to true-->
  <arg name="rviz" value="false"/>

  <!--To launch scanunifier set the value to true-->
  <arg name="scanunifier" value="false"/>

  <!--To move robot using teleop_keyboard-->
  <arg name="software_joystick" value="false"/>

<!---=================================================================================================================================================================-->

 <!--Gazebo Variables--> 
  <arg name="world" default="empty"/> 
  <arg name="paused" default="false"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(arg world_name_global)"/>
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="gui" value="$(arg gui)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="debug" value="$(arg debug)"/>
</include>
<!---=================================================================================================================================================================-->

  <!--Robot description to param server-->
  <param name="robot_description" command="$(find xacro)/xacro $(find kuka_lbr_iiwa_support)/urdf/lbr_iiwa_14_r820.xacro"/>

  <node name="mmo_700_spawn" pkg="gazebo_ros" type="spawn_model" output="screen"
  args="-x -2.5 -urdf -param robot_description -model fwx" />

  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher">
  <param name="publish_frequency" value="20.0"/>
  </node>


   <include file="$(find neo_simulation)/config/controller/launch/controller_utils.launch"/>

<rosparam file="$(find iiwa_moveit)/config/iiwa_controller.yaml" command="load"/>
<node name="iiwa_controller_spawner" pkg="controller_manager" type="controller_manager" args="spawn iiwa_controller" respawn="false" output="screen"/>

<!---===group ns mbx ==========================================================================================================================================================-->
  <group ns="mbx">
    <!--param name="tf_prefix" value="mbx_tf" /-->
    <param name="robot_description" command="$(find xacro)/xacro $(find gazebo_example)/urdf/mbx_model.urdf.xacro ns:=mbx" />
    <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
        args="-x 2.3 -Y 3.14159 -unpause -urdf -model mbx -param robot_description" respawn="false" output="screen" />
    <!-- load controller yaml -->
    <rosparam command="load" file="$(find gazebo_example)/config/wx.yaml"/>
    <!-- controller manager -->
    <node name="controller_spawner_car" pkg="controller_manager" type="spawner" ns="/mbx"
        args="wx_controller joint_state_controller"/>
    <node pkg="robot_state_publisher" type="robot_state_publisher"  name="robot_state_publisher">
      <param name="publish_frequency" type="double" value="30.0" />
    </node>
    <!--teleop control-->
    <!--<node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_keyboard"  output="screen">
    </node-->
  </group>
  <!--wx_rotate-->
    <node name="wx_rotate_node" pkg="gazebo_example" type="wx_rotate_node">
      <remap from="command" to="/mbx/wx_controller/command"/>
    </node>
<!---=================================================================================================================================================================-->
 
  <!--if arg scan-unifier is set to true-->

 <group if="$(arg scanunifier)">
  <include file="$(find neo_simulation)/config/mmo_700/scan_unifier/mmo_700_scan_unifier.launch"/>
 </group>   

<!---=================================================================================================================================================================-->
 
 <!--Neo control Package  **To use teleop-keyboard and joystick, neo_control package must be cloned to the workspace**--> 
 
 <!--if arg software_joystick is set to true-->

 <group if="$(arg software_joystick)">
   <node pkg="teleop_twist_keyboard" type="teleop_twist_keyboard.py" name="teleop_keyboard"  output="screen">
  </node>
 </group>

<!---=================================================================================================================================================================-->

</launch>
